/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.didcommx.didcomm.demo

import org.didcommx.didcomm.demo.DIDCommDemoHelper.Companion.resolvePeerDID
import org.didcommx.didcomm.secret.SecretResolverDemo
import org.didcommx.didcomm.utils.fromJsonToMap
import org.didcommx.peerdid.DIDCommServicePeerDID
import org.didcommx.peerdid.DIDDocPeerDID
import org.didcommx.peerdid.VerificationMaterialFormatPeerDID
import org.didcommx.peerdid.isPeerDID
import org.junit.Before
import org.junit.Rule
import org.junit.jupiter.params.provider.MethodSource
import org.junit.rules.TemporaryFolder
import kotlin.test.*

class DIDCommDemoTest {

    @Rule
    @JvmField
    val secretsFolder = TemporaryFolder()

    lateinit var demo: DIDCommDemoHelper

    @Before
    fun setup() {
        val secretsFile = secretsFolder.newFile("secrets.json")
        demo = DIDCommDemoHelper(SecretResolverDemo(secretsFile.absolutePath))
    }

    private fun checkExpectedDIDDoc(
        peerDID: String,
        authKeysCount: Int,
        agreemKeysCount: Int,
        serviceEndpoint: String? = null,
        serviceRoutingKeys: List<String>? = null
    ) {
        val didDocJson = resolvePeerDID(peerDID, VerificationMaterialFormatPeerDID.JWK)
        val didDoc = DIDDocPeerDID.fromJson(didDocJson)
        assertEquals(authKeysCount, didDoc.authentication.size)
        assertEquals(agreemKeysCount, didDoc.keyAgreement.size)
        serviceEndpoint?.run {
            assertEquals(1, didDoc.service!!.size)
            val service = didDoc.service!![0]
            assertTrue(service is DIDCommServicePeerDID)
            assertEquals(serviceEndpoint, service.serviceEndpoint)
            assertEquals(serviceRoutingKeys, service.routingKeys)
        }
    }

    @Test
    fun testCreatePeerDidDefault() {
        val peerDID = demo.createPeerDID()
        assertTrue(isPeerDID(peerDID))
        assertTrue(peerDID.startsWith("did:peer:2"))
        assertEquals(
            2, demo.secretsResolver.getKids().size
        )
        demo.secretsResolver.getKids().forEach {
            assertTrue(it.startsWith(peerDID))
        }
        checkExpectedDIDDoc(peerDID, 1, 1)
    }

    @Test
    fun testCreatePeerDidNumalgo0() {
        val peerDID = demo.createPeerDID(authKeysCount = 1, agreementKeysCount = 0)
        assertTrue(isPeerDID(peerDID))
        assertTrue(peerDID.startsWith("did:peer:0"))
        assertEquals(
            1, demo.secretsResolver.getKids().size
        )
        demo.secretsResolver.getKids().forEach {
            assertTrue(it.startsWith(peerDID))
        }
        checkExpectedDIDDoc(peerDID, 1, 0)
    }

    @Test
    fun testCreatePeerDidNumalgo2NoService() {
        val peerDID = demo.createPeerDID(authKeysCount = 1, agreementKeysCount = 1)
        assertTrue(isPeerDID(peerDID))
        assertTrue(peerDID.startsWith("did:peer:2"))
        assertEquals(
            2, demo.secretsResolver.getKids().size
        )
        demo.secretsResolver.getKids().forEach {
            assertTrue(it.startsWith(peerDID))
        }
        checkExpectedDIDDoc(peerDID, 1, 1)
    }

    @Test
    fun testCreatePeerDidNumalgo2WithService() {
        val endpoint = "https://my-endpoint"
        val peerDID = demo.createPeerDID(authKeysCount = 1, agreementKeysCount = 1, serviceEndpoint = endpoint)
        assertTrue(isPeerDID(peerDID))
        assertTrue(peerDID.startsWith("did:peer:2"))
        assertEquals(
            2, demo.secretsResolver.getKids().size
        )
        demo.secretsResolver.getKids().forEach {
            assertTrue(it.startsWith(peerDID))
        }
        checkExpectedDIDDoc(peerDID, 1, 1, endpoint)
    }

    @Test
    fun testCreatePeerDidNumalgo2WithServiceAndKeys() {
        val endpoint = "https://my-endpoint"
        val routingKeys = listOf("key1", "key2")
        val peerDID = demo.createPeerDID(
            authKeysCount = 1, agreementKeysCount = 1,
            serviceEndpoint = endpoint, serviceRoutingKeys = routingKeys
        )
        assertTrue(isPeerDID(peerDID))
        assertTrue(peerDID.startsWith("did:peer:2"))
        assertEquals(
            2, demo.secretsResolver.getKids().size
        )
        demo.secretsResolver.getKids().forEach {
            assertTrue(it.startsWith(peerDID))
        }
        checkExpectedDIDDoc(peerDID, 1, 1, endpoint, routingKeys)
    }


    @Test
    fun testResolvePeerDID() {
        val did = "did:peer:0z6MkqRYqQiSgvZQdnBytw86Qbs2ZWUkGv22od935YF4s8M7V"
        val didDocJson = DIDCommDemoHelper.resolvePeerDID(did, format = VerificationMaterialFormatPeerDID.JWK)
        val didDoc = fromJsonToMap(didDocJson)
        assertTrue("authentication" in didDoc)
        assertEquals(did, didDoc["id"])
    }

    private fun fromDID() =
        demo.createPeerDID(authKeysCount = 2, agreementKeysCount = 2)

    private fun toDID() =
        demo.createPeerDID(authKeysCount = 2, agreementKeysCount = 2)

    @Test
    @MethodSource("messages")
    fun testPackUnpackAuthcrypt() {
        val message = "{'aaa': 'bbb'}"
        val from = fromDID()
        val to = toDID()
        val packed = demo.pack(message, from = from, to = to)

        val unpackRes = demo.unpack(packed.packedMessage)
        assertEquals(message, unpackRes.message)
        assertEquals(from, unpackRes.from)
        assertEquals(to, unpackRes.to)

        assertTrue(unpackRes.res.metadata.encrypted)
        assertTrue(unpackRes.res.metadata.authenticated)
        assertTrue(unpackRes.res.metadata.anonymousSender)
        assertFalse(unpackRes.res.metadata.nonRepudiation)
    }

    @Test
    @MethodSource("messages")
    fun testPackUnpackAnoncrypt() {
        val message = "{'aaa': 'bbb'}"
        val to = toDID()
        val packed = demo.pack(message, to = to)

        val unpackRes = demo.unpack(packed.packedMessage)
        assertEquals(message, unpackRes.message)
        assertNull(unpackRes.from)
        assertEquals(to, unpackRes.to)

        assertTrue(unpackRes.res.metadata.encrypted)
        assertFalse(unpackRes.res.metadata.authenticated)
        assertTrue(unpackRes.res.metadata.anonymousSender)
        assertFalse(unpackRes.res.metadata.nonRepudiation)
    }

    @Test
    @MethodSource("messages")
    fun testPackUnpackAuthcryptSigned() {
        val message = "hello"
        val from = fromDID()
        val to = toDID()
        val packed = demo.pack(message, from = from, to = to, signFrom = from)

        val unpackRes = demo.unpack(packed.packedMessage)
        assertEquals(message, unpackRes.message)
        assertEquals(from, unpackRes.from)
        assertEquals(to, unpackRes.to)

        assertTrue(unpackRes.res.metadata.encrypted)
        assertTrue(unpackRes.res.metadata.authenticated)
        assertTrue(unpackRes.res.metadata.anonymousSender)
        assertTrue(unpackRes.res.metadata.nonRepudiation)
    }

    @Test
    fun testPackUnpackAuthcryptSenderNotProtected() {
        val message = "{'aaa': 'bbb'}"
        val from = fromDID()
        val to = toDID()
        val packed = demo.pack(message, from = from, to = to, protectSender = false)

        val unpackRes = demo.unpack(packed.packedMessage)
        assertEquals(message, unpackRes.message)
        assertEquals(from, unpackRes.from)
        assertEquals(to, unpackRes.to)

        assertTrue(unpackRes.res.metadata.encrypted)
        assertTrue(unpackRes.res.metadata.authenticated)
        assertFalse(unpackRes.res.metadata.anonymousSender)
        assertFalse(unpackRes.res.metadata.nonRepudiation)
    }
}
